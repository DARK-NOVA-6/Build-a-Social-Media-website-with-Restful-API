-- Generated by Oracle SQL Developer Data Modeler 20.4.0.374.0801
--   at:        2022-07-11 04:10:36 EEST
--   site:      Oracle Database 11g
--   type:      Oracle Database 11g



-- predefined type, no DDL - MDSYS.SDO_GEOMETRY

-- predefined type, no DDL - XMLTYPE

CREATE TABLE chat (
    id                INTEGER NOT NULL,
    last_date         DATE NOT NULL,
    number_unread     INTEGER DEFAULT 0,
    user_account_id   INTEGER,
    user_account_id1  INTEGER
)
LOGGING;

ALTER TABLE chat ADD CONSTRAINT chat_pk PRIMARY KEY ( id );

CREATE TABLE chat_line (
    id             INTEGER NOT NULL,
    message        VARCHAR2(500) NOT NULL,
    send_date      DATE DEFAULT sysdate NOT NULL,
    received_date  DATE,
    read_time      DATE,
    send_from      INTEGER NOT NULL,
    chat_id        INTEGER NOT NULL
)
LOGGING;

ALTER TABLE chat_line
    ADD CHECK ( send_from IN ( 1, 2 ) );

ALTER TABLE chat_line ADD CONSTRAINT chat_line_pk PRIMARY KEY ( id );

CREATE TABLE comment_post (
    id               INTEGER NOT NULL,
    text             VARCHAR2(500) NOT NULL,
    comment_date     DATE DEFAULT sysdate,
    reactions        INTEGER DEFAULT 0,
    post_id          INTEGER NOT NULL,
    user_account_id  INTEGER NOT NULL
)
LOGGING;

ALTER TABLE comment_post ADD CONSTRAINT comment_pk PRIMARY KEY ( id );

CREATE TABLE event (
    id                 INTEGER NOT NULL,
    text               VARCHAR2(2500) NOT NULL,
    announcement_date  DATE DEFAULT sysdate,
    event_date         DATE NOT NULL,
    interested         INTEGER DEFAULT 0 NOT NULL,
    user_account_id    INTEGER
)
LOGGING;

ALTER TABLE event ADD CONSTRAINT event_ck_1 CHECK ( announcement_date <= event_date );

ALTER TABLE event ADD CONSTRAINT event_pk PRIMARY KEY ( id );

CREATE TABLE friendship (
    id                INTEGER NOT NULL,
    friendship_date   DATE DEFAULT sysdate NOT NULL,
    user_account_id   INTEGER NOT NULL,
    user_account_id1  INTEGER NOT NULL
)
LOGGING;

ALTER TABLE friendship ADD CONSTRAINT friendship_ck_1 CHECK ( user_account_id != user_account_id1 );

ALTER TABLE friendship ADD CONSTRAINT friendship_pk PRIMARY KEY ( id );

CREATE TABLE joined_event (
    id               INTEGER NOT NULL,
    event_id         INTEGER NOT NULL,
    user_account_id  INTEGER NOT NULL
)
LOGGING;

ALTER TABLE joined_event ADD CONSTRAINT joined_event_pk PRIMARY KEY ( id );

CREATE TABLE notification (
    id               INTEGER NOT NULL,
    text             VARCHAR2(200) NOT NULL,
    event_url        VARCHAR2(200),
    event_date       DATE DEFAULT sysdate,
    seen             CHAR(1) DEFAULT '0',
    user_account_id  INTEGER NOT NULL
)
LOGGING;

ALTER TABLE notification ADD CONSTRAINT notification_pk PRIMARY KEY ( id );

CREATE TABLE post (
    id               INTEGER NOT NULL,
    text             VARCHAR2(2500),
    photo_url        VARCHAR2(250),
    posting_date     DATE DEFAULT sysdate,
    reactions        INTEGER DEFAULT 0,
    comments         INTEGER DEFAULT 0,
    user_account_id  INTEGER NOT NULL
)
LOGGING;

ALTER TABLE post
    ADD CONSTRAINT post_ck_1 CHECK ( text IS NOT NULL
                                     OR photo_url IS NOT NULL );

ALTER TABLE post ADD CONSTRAINT post_pk PRIMARY KEY ( id );

CREATE TABLE react_comment (
    id                 INTEGER NOT NULL,
    comment_post_id    INTEGER NOT NULL,
    reactions_type_id  INTEGER NOT NULL,
    user_account_id    INTEGER NOT NULL
)
LOGGING;

ALTER TABLE react_comment ADD CONSTRAINT react_comment_pk PRIMARY KEY ( id );

CREATE TABLE react_post (
    id                 INTEGER NOT NULL,
    post_id            INTEGER NOT NULL,
    reactions_type_id  INTEGER NOT NULL,
    user_account_id    INTEGER NOT NULL
)
LOGGING;

ALTER TABLE react_post ADD CONSTRAINT react_post_pk PRIMARY KEY ( id );

CREATE TABLE reactions_type (
    id     INTEGER NOT NULL,
    title  VARCHAR2(50) NOT NULL
)
LOGGING;

ALTER TABLE reactions_type ADD CONSTRAINT reactions_type_pk PRIMARY KEY ( id );

ALTER TABLE reactions_type ADD CONSTRAINT reactions_type__un UNIQUE ( title );

CREATE TABLE request_friendship (
    id                INTEGER NOT NULL,
    send_date         DATE DEFAULT sysdate NOT NULL,
    user_account_id   INTEGER NOT NULL,
    user_account_id1  INTEGER NOT NULL
)
LOGGING;

ALTER TABLE request_friendship ADD CONSTRAINT request_friendship_ck_1 CHECK ( user_account_id != user_account_id1 );

ALTER TABLE request_friendship ADD CONSTRAINT request_friendship_pk PRIMARY KEY ( id );

CREATE TABLE seen_post (
    id               INTEGER NOT NULL,
    counter          INTEGER DEFAULT 0,
    user_account_id  INTEGER NOT NULL,
    post_id          INTEGER NOT NULL
)
LOGGING;

ALTER TABLE seen_post ADD CONSTRAINT seen_post_pk PRIMARY KEY ( id );

CREATE TABLE user_account (
    id          INTEGER NOT NULL,
    username    VARCHAR2(100) NOT NULL,
    email       VARCHAR2(250) NOT NULL,
    password    VARCHAR2(250) NOT NULL,
    first_name  VARCHAR2(65) NOT NULL,
    last_name   VARCHAR2(65) NOT NULL,
    photo_url   VARCHAR2(250),
    birthdate   DATE
)
LOGGING;

ALTER TABLE user_account ADD CONSTRAINT user_pk PRIMARY KEY ( id );

ALTER TABLE user_account ADD CONSTRAINT user__un UNIQUE ( email );

ALTER TABLE chat_line
    ADD CONSTRAINT chat_line_chat_fk FOREIGN KEY ( chat_id )
        REFERENCES chat ( id )
            ON DELETE CASCADE
    NOT DEFERRABLE;

ALTER TABLE chat
    ADD CONSTRAINT chat_user_account_fk FOREIGN KEY ( user_account_id )
        REFERENCES user_account ( id )
            ON DELETE SET NULL
    NOT DEFERRABLE;

ALTER TABLE chat
    ADD CONSTRAINT chat_user_account_fkv2 FOREIGN KEY ( user_account_id1 )
        REFERENCES user_account ( id )
            ON DELETE SET NULL
    NOT DEFERRABLE;

ALTER TABLE comment_post
    ADD CONSTRAINT comment_post_post_fk FOREIGN KEY ( post_id )
        REFERENCES post ( id )
            ON DELETE CASCADE
    NOT DEFERRABLE;

ALTER TABLE comment_post
    ADD CONSTRAINT comment_post_user_account_fk FOREIGN KEY ( user_account_id )
        REFERENCES user_account ( id )
            ON DELETE CASCADE
    NOT DEFERRABLE;

ALTER TABLE event
    ADD CONSTRAINT event_user_account_fk FOREIGN KEY ( user_account_id )
        REFERENCES user_account ( id )
            ON DELETE SET NULL
    NOT DEFERRABLE;

ALTER TABLE friendship
    ADD CONSTRAINT friendship_user_account_fk FOREIGN KEY ( user_account_id )
        REFERENCES user_account ( id )
            ON DELETE CASCADE
    NOT DEFERRABLE;

ALTER TABLE friendship
    ADD CONSTRAINT friendship_user_account_fkv2 FOREIGN KEY ( user_account_id1 )
        REFERENCES user_account ( id )
            ON DELETE CASCADE
    NOT DEFERRABLE;

ALTER TABLE joined_event
    ADD CONSTRAINT joined_event_event_fk FOREIGN KEY ( event_id )
        REFERENCES event ( id )
            ON DELETE CASCADE
    NOT DEFERRABLE;

ALTER TABLE joined_event
    ADD CONSTRAINT joined_event_user_account_fk FOREIGN KEY ( user_account_id )
        REFERENCES user_account ( id )
            ON DELETE CASCADE
    NOT DEFERRABLE;

ALTER TABLE notification
    ADD CONSTRAINT notification_user_account_fk FOREIGN KEY ( user_account_id )
        REFERENCES user_account ( id )
            ON DELETE CASCADE
    NOT DEFERRABLE;

ALTER TABLE post
    ADD CONSTRAINT post_user_account_fk FOREIGN KEY ( user_account_id )
        REFERENCES user_account ( id )
            ON DELETE CASCADE
    NOT DEFERRABLE;

ALTER TABLE react_comment
    ADD CONSTRAINT react_comment_comment_post_fk FOREIGN KEY ( comment_post_id )
        REFERENCES comment_post ( id )
            ON DELETE CASCADE
    NOT DEFERRABLE;

ALTER TABLE react_comment
    ADD CONSTRAINT react_comment_user_account_fk FOREIGN KEY ( user_account_id )
        REFERENCES user_account ( id )
            ON DELETE CASCADE
    NOT DEFERRABLE;

ALTER TABLE react_post
    ADD CONSTRAINT react_post_post_fk FOREIGN KEY ( post_id )
        REFERENCES post ( id )
            ON DELETE CASCADE
    NOT DEFERRABLE;

ALTER TABLE react_post
    ADD CONSTRAINT react_post_reactions_type_fk FOREIGN KEY ( reactions_type_id )
        REFERENCES reactions_type ( id )
            ON DELETE CASCADE
    NOT DEFERRABLE;

ALTER TABLE react_post
    ADD CONSTRAINT react_post_user_account_fk FOREIGN KEY ( user_account_id )
        REFERENCES user_account ( id )
            ON DELETE CASCADE
    NOT DEFERRABLE;

ALTER TABLE react_comment
    ADD CONSTRAINT recmnt_reacctions_type_fk FOREIGN KEY ( reactions_type_id )
        REFERENCES reactions_type ( id )
            ON DELETE CASCADE
    NOT DEFERRABLE;

ALTER TABLE request_friendship
    ADD CONSTRAINT reqfriend_useracc_fk FOREIGN KEY ( user_account_id )
        REFERENCES user_account ( id )
            ON DELETE CASCADE
    NOT DEFERRABLE;

ALTER TABLE request_friendship
    ADD CONSTRAINT reqfriend_useracc_fkv2 FOREIGN KEY ( user_account_id1 )
        REFERENCES user_account ( id )
            ON DELETE CASCADE
    NOT DEFERRABLE;

ALTER TABLE seen_post
    ADD CONSTRAINT seen_post_post_fk FOREIGN KEY ( post_id )
        REFERENCES post ( id )
            ON DELETE CASCADE
    NOT DEFERRABLE;

ALTER TABLE seen_post
    ADD CONSTRAINT seen_post_user_account_fk FOREIGN KEY ( user_account_id )
        REFERENCES user_account ( id )
            ON DELETE CASCADE
    NOT DEFERRABLE;

CREATE OR REPLACE TRIGGER Trg_Insert_Delete_Comment 
    BEFORE INSERT OR DELETE ON comment_post REFERENCING 
    NEW AS new 
    OLD AS old 
    FOR EACH ROW 
    ENABLE 
begin
IF DELETING THEN 
	update post
		set comments = comments  - 1 
		where post.id = :old.post_id ;
ELSE
	update post
		set comments = comments  + 1 
		where post.id = :new.post_id ;
END IF;

end; 
/

CREATE OR REPLACE TRIGGER Trg_Insert_Delete_React_Comment 
    AFTER INSERT OR DELETE ON react_comment REFERENCING 
    NEW AS new 
    OLD AS old 
    FOR EACH ROW 
    ENABLE 
begin

IF DELETING THEN 
	update comment_post
		set reactions = reactions - 1 
		where 
			comment_post.id = :old.comment_post_id
ELSE
	update post
		set reactions = reactions + 1 
		where 
		comment_post.id = :new.comment_post_id
END IF ;

end; 
/

CREATE OR REPLACE TRIGGER Trg_Insert_Delete_React_Post 
    AFTER INSERT OR DELETE ON react_post REFERENCING 
    NEW AS new 
    OLD AS old 
    FOR EACH ROW 
    ENABLE 
begin

IF DELETING THEN 
	update post
		set reactions = reactions - 1 
		where 
			post.id = :old.post_id
ELSE
	update post
		set reactions = reactions + 1 
		where 
			post.id = :new.post_id
END IF ;

end; 
/

CREATE SEQUENCE chat_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER chat_id_trg BEFORE
    INSERT ON chat
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := chat_id_seq.nextval;
END;
/

CREATE SEQUENCE chat_line_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER chat_line_id_trg BEFORE
    INSERT ON chat_line
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := chat_line_id_seq.nextval;
END;
/

CREATE SEQUENCE comment_post_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER comment_post_id_trg BEFORE
    INSERT ON comment_post
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := comment_post_id_seq.nextval;
END;
/

CREATE SEQUENCE event_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER event_id_trg BEFORE
    INSERT ON event
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := event_id_seq.nextval;
END;
/

CREATE SEQUENCE friendship_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER friendship_id_trg BEFORE
    INSERT ON friendship
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := friendship_id_seq.nextval;
END;
/

CREATE SEQUENCE joined_event_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER joined_event_id_trg BEFORE
    INSERT ON joined_event
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := joined_event_id_seq.nextval;
END;
/

CREATE SEQUENCE notification_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER notification_id_trg BEFORE
    INSERT ON notification
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := notification_id_seq.nextval;
END;
/

CREATE SEQUENCE post_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER post_id_trg BEFORE
    INSERT ON post
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := post_id_seq.nextval;
END;
/

CREATE SEQUENCE react_comment_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER react_comment_id_trg BEFORE
    INSERT ON react_comment
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := react_comment_id_seq.nextval;
END;
/

CREATE SEQUENCE react_post_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER react_post_id_trg BEFORE
    INSERT ON react_post
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := react_post_id_seq.nextval;
END;
/

CREATE SEQUENCE reactions_type_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER reactions_type_id_trg BEFORE
    INSERT ON reactions_type
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := reactions_type_id_seq.nextval;
END;
/

CREATE SEQUENCE request_friendship_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER request_friendship_id_trg BEFORE
    INSERT ON request_friendship
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := request_friendship_id_seq.nextval;
END;
/

CREATE SEQUENCE seen_post_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER seen_post_id_trg BEFORE
    INSERT ON seen_post
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := seen_post_id_seq.nextval;
END;
/

CREATE SEQUENCE user_account_id_seq START WITH 1 NOCACHE ORDER;

CREATE OR REPLACE TRIGGER user_account_id_trg BEFORE
    INSERT ON user_account
    FOR EACH ROW
    WHEN ( new.id IS NULL )
BEGIN
    :new.id := user_account_id_seq.nextval;
END;
/



-- Oracle SQL Developer Data Modeler Summary Report: 
-- 
-- CREATE TABLE                            14
-- CREATE INDEX                             0
-- ALTER TABLE                             43
-- CREATE VIEW                              0
-- ALTER VIEW                               0
-- CREATE PACKAGE                           0
-- CREATE PACKAGE BODY                      0
-- CREATE PROCEDURE                         0
-- CREATE FUNCTION                          0
-- CREATE TRIGGER                          17
-- ALTER TRIGGER                            0
-- CREATE COLLECTION TYPE                   0
-- CREATE STRUCTURED TYPE                   0
-- CREATE STRUCTURED TYPE BODY              0
-- CREATE CLUSTER                           0
-- CREATE CONTEXT                           0
-- CREATE DATABASE                          0
-- CREATE DIMENSION                         0
-- CREATE DIRECTORY                         0
-- CREATE DISK GROUP                        0
-- CREATE ROLE                              0
-- CREATE ROLLBACK SEGMENT                  0
-- CREATE SEQUENCE                         14
-- CREATE MATERIALIZED VIEW                 0
-- CREATE MATERIALIZED VIEW LOG             0
-- CREATE SYNONYM                           0
-- CREATE TABLESPACE                        0
-- CREATE USER                              0
-- 
-- DROP TABLESPACE                          0
-- DROP DATABASE                            0
-- 
-- REDACTION POLICY                         0
-- 
-- ORDS DROP SCHEMA                         0
-- ORDS ENABLE SCHEMA                       0
-- ORDS ENABLE OBJECT                       0
-- 
-- ERRORS                                   0
-- WARNINGS                                 0
